{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Integrated Code","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"upMLAfpLta7I","executionInfo":{"status":"ok","timestamp":1621873487928,"user_tz":240,"elapsed":34312,"user":{"displayName":"Lucas Carrit Delgado Pinheiro","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhpW2ryMbnZyP_xfrkmd09AbdAuOO9U1yKkPr6A=s64","userId":"18181449537103980158"}},"outputId":"89efaeae-edd5-47a9-ed51-5c83239c65b4"},"source":["import os\n","import sys\n","import time\n","import random\n","import itertools\n","import networkx as nx\n","import networkx.algorithms.isomorphism as iso\n","from itertools import groupby\n","import matplotlib.pyplot as plt\n","import pprint\n","import re\n","from google.colab import drive\n","\n","# Global string variables\n","line = '______________________________________________________________________'\n","hashes = '######################################################################'\n","\n","# Gain access to google drive \n","drive.mount('/content/drive')\n","\n","################################################################################\n","# Print Title: simple helper function to make printing easier\n","################################################################################\n","def print_title(message):\n","\n","  print('\\n')\n","  print(line)\n","  print(hashes)\n","  print(message.upper())\n","  print(hashes)\n","\n","\n","################################################################################\n","# Read the text file from a stream and store data as dict\n","################################################################################\n","def read_netlist(fp):\n","\n","    # Declare empty dictionary\n","    circuit_data = {}\n","\n","    # Process each line in the stream\n","    for line in fp:\n","\n","        # Ignore comments\n","        if '#' in line:\n","            continue\n","\n","        # Split line into two parts - the node and its adjs\n","        line = line.strip().split(':')\n","\n","        # Further split the adj into a list\n","        adj = line[1].split(', ')\n","        adj[0] = adj[0][1:]\n","\n","        # Retrive name, data, and element type from the node\n","        name = line[0][0:2]\n","        result = re.search('\\((.*)\\)', line[0])\n","        data = result.group(1)\n","        element = name[0]\n","\n","        # Put all this into a tuple then store in a dictionary \n","        circuit_data[name] = (element, data, adj)\n","\n","    return circuit_data\n","\n","\n","################################################################################\n","# Create graph from the dict structure\n","################################################################################\n","def create_graph(circuit):\n","\n","  #Declare empty graph\n","  graph = nx.Graph()\n","\n","  # Iterate through dict \n","  for node, attributes in circuit.items():\n","\n","    # Add the node with an attribute of name\n","    graph.add_node(node, name = node, element = attributes[0], data = attributes[1])\n","\n","    # Make the branches\n","    branches = attributes[2]\n","    for branch in branches:\n","\n","      # Add the corresponding edge \n","      graph.add_edge(node, branch)\n","\n","  # Plot\n","  nx.draw(graph, with_labels = True, node_size=1000) \n","  plt.show()\n","\n","  return graph\n","\n","################################################################################\n","# Compress the circuit by reducing the subcircuit to one node\n","################################################################################\n","def compress_graph(circuit_graph, subcircuit_graph):\n","\n","  # Evaluate if subcircuit is a subgraph of circuit\n","  # The element and data must be the same for nodes to match, not the name\n","  nm = iso.categorical_node_match(['element', 'data'], [False, False])\n","  GM = iso.GraphMatcher(circuit_graph, subcircuit_graph, node_match = nm)\n","\n","  # Make a list of dicts. The dicts have keys that correspond to their\n","  # respective subgraph location. \n","  subcircuits = []\n","  for iter in GM.subgraph_isomorphisms_iter():\n","    subcircuits.append(iter)\n","\n","\n","  # For each matching subcircuit dict, replace with grouped node\n","  for count, subcircuit in enumerate(subcircuits):\n","\n","    # Name the new group, and add to circuit\n","    new_node = 'x' + str(count)\n","    circuit_graph.add_node(new_node)\n","\n","    # See if each node in the circuit is one of the subcircuit nodes\n","    for node in circuit_graph.copy().nodes():\n","\n","      # If it is, remove it and reattach its neighbors to the new node\n","      if node in subcircuit.keys():\n","        for adj_node in circuit_graph.neighbors(node):\n","          if adj_node in subcircuit.keys():\n","            continue\n","          else:\n","            circuit_graph.add_edge(new_node, adj_node)\n","        circuit_graph.remove_node(node)\n","     \n","     # Otherwise, do nothing\n","\n","  # Plot\n","  nx.draw(circuit_graph, with_labels = True, node_size=1000) \n","  plt.show() \n","\n","  return circuit_graph\n","\n","################################################################################\n","# Take a graph as input and find all the subgraphs possible\n","################################################################################\n","def find_sub_graphs(graph, print_sub_graphs=False):\n","    \"\"\"\n","    Find sub graphs of a complete graph\n","    :param graph: complete graph to compute all connected sub graphs\n","    :param print_sub_graphs: whether to print computed sub graphs\n","    :return: list\n","    \"\"\"\n","\n","    # Attempting to find all sub_graphs from a complete graph that are connected with at least 2 nodes\n","    # Store the found subgraphs within a list data structure\n","    found_sub_graphs = []\n","    min_num_nodes = 2\n","\n","    for nodes in range(min_num_nodes, graph.number_of_nodes()):\n","        for SG in (graph.subgraph(selected_nodes)\n","                   for selected_nodes in itertools.combinations(graph, nodes)):\n","            if nx.is_connected(SG):\n","                found_sub_graphs.append(SG)\n","\n","    if print_sub_graphs:\n","        for sg in found_sub_graphs:\n","            print(sg.nodes)\n","\n","    return found_sub_graphs\n","\n","################################################################################\n","# Helper function. Rather than running actual isomorphism test, this runs faster\n","################################################################################\n","def could_be_isomorphic_parser(g1):\n","    \"\"\"\n","    Mimics the could_be_isomorphic function of networkx but rather than checking if 2 graphs could be isomorphic,\n","    it checks the local properties of one graph and sorts them to enable us to group similar sub graphs for a quicker\n","    isomorphism check.\n","\n","    could_be_isomorphic source code:\n","    https://networkx.org/documentation/networkx-1.10/_modules/networkx/algorithms/isomorphism/isomorph.html#could_be_isomorphic\n","    :param g1: subgraph to compute local properties\n","    :return: list\n","    \"\"\"\n","\n","    # Check local properties\n","    d = g1.degree()\n","    d1 = {}\n","    for v in d:\n","        d1[v[0]] = v[1]\n","    t1 = nx.triangles(g1)\n","    c1 = nx.number_of_cliques(g1)\n","    props1 = [[d1[v], t1[v], c1[v]] for v in d1]\n","    props1.sort()\n","\n","    return props1\n","\n","################################################################################\n","# Makes use of the two helper functions in order to find isomorphic sub graphs\n","################################################################################\n","def find_isomorphic_sub_graphs(sub_graphs, plot_random_isomorphic_graphs=False):\n","    \"\"\"\n","    Find all isomorphic sub graphs\n","    :param sub_graphs: sub graphs\n","    :param plot_random_isomorphic_graphs: whether to plot random isomorphic graphs\n","    :return: void\n","    \"\"\"\n","\n","    # Sort the graphs based on their local properties, therefore their likelihood of being isomorphic\n","    sorted_graphs = sorted(sub_graphs, key=could_be_isomorphic_parser)\n","\n","    for _, g in groupby(sorted_graphs, key=could_be_isomorphic_parser):\n","        # Find graphs with a similar fingerprint (similar local properties [degree, triangle, cliques])\n","        similar_graphs = list(g)\n","        n = len(similar_graphs)\n","        # Only deal with a grouping if more than one graph have the same properties in the grouping\n","        if n > 1:\n","            for i in range(n):\n","                for j in range(i + 1, n):\n","                    g1, g2 = similar_graphs[i], similar_graphs[j]\n","                    # Select the desired number of nodes in the subgraph\n","                    n_nodes = 3\n","                    if len(g1) != n_nodes:\n","                        continue\n","                    # Only subgraphs that do not share any common nodes are relevant\n","                    independent = True\n","                    for node in g1:\n","                        if node in g2:\n","                            independent = False\n","                            break\n","                        if not independent:\n","                            continue\n","                    else:\n","                        # It is also important to check if the attributes and data are the same\n","                        g1_elements = []\n","                        g1_data = []\n","                        for (node, dictionary) in g1.nodes(data=True):\n","                            g1_elements.append(dictionary['element'])\n","                            g1_data.append(dictionary['data'])\n","\n","                        g2_elements = []\n","                        g2_data = []\n","                        for (node, dictionary) in g2.nodes(data=True):\n","                            g2_elements.append(dictionary['element'])\n","                            g2_data.append(dictionary['data'])\n","\n","                        # Sort the lists to avoid issues due to the order of the elements\n","                        g1_elements.sort()\n","                        g1_data.sort()\n","                        g2_elements.sort()\n","                        g2_data.sort()\n","\n","                        # Skip to the next subgraph if the elements and/or data don't match\n","                        if str(g1_elements) != str(g2_elements):\n","                            continue\n","                        if str(g1_data) != str(g2_data):\n","                            continue\n","\n","                        # Print the isomorphic subgraphs\n","                        fig, axes = plt.subplots(nrows=1, ncols=2)\n","                        ax = axes.flatten()\n","                        nx.draw_networkx(g1, ax=ax[0])\n","                        nx.draw_networkx(g2, ax=ax[1])\n","                        plt.suptitle(f'Isomorphic Sub-graphs')\n","                        plt.show()\n","                        return g1\n","\n","if __name__ == '__main__':\n","    begin_time = time.time()\n","\n","    # Read the graph text file\n","    circuit = read_netlist(open('/content/drive/My Drive/Examples/new_circuit.txt').readlines())\n","\n","    # Print the dict struct \n","    print_title('Dictionary for the circuit:')\n","    pprint.pprint(circuit)\n","    print(line)\n","\n","    # Create and print the graphs \n","    print_title('Graph for the circuit:')\n","    circuit_graph = create_graph(circuit)\n","    print(line)\n","\n","\n","    # Find all sub graphs from complete graph\n","    all_sub_graphs = find_sub_graphs(circuit_graph)\n","    print(f'Number of sub graphs found: {len(all_sub_graphs)}')\n","\n","    # Find all isomorphic sub graphs\n","    subcircuit_graph = find_isomorphic_sub_graphs(all_sub_graphs, plot_random_isomorphic_graphs=True)\n","\n","    # Reduce the graph \n","    print_title('Graph for the compressed circuit:')\n","    circuit_graph = compress_graph(circuit_graph, subcircuit_graph)\n","    print(line)\n","    print('\\n\\n\\n\\n\\n')\n","    print('Finished!')\n","\n","    end_time = time.time()\n","    time_taken = round(end_time - begin_time, 4)\n","    print(f'\\nTook {time_taken} seconds')\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n","\n","\n","______________________________________________________________________\n","######################################################################\n","DICTIONARY FOR THE CIRCUIT:\n","######################################################################\n","{'C1': ('C', '1 nF', ['L1', 'R1', 'R2', 'R5']),\n"," 'C2': ('C', '1 nF', ['L2', 'R3', 'R4', 'R6']),\n"," 'L1': ('L', '10 mH', ['C1', 'R1', 'R5']),\n"," 'L2': ('L', '10 mH', ['C2', 'R3', 'R6']),\n"," 'R1': ('R', '20 ohms', ['V1', 'C1', 'L1', 'R3']),\n"," 'R2': ('R', '150 ohms', ['V1', 'C1', 'R4', 'R5']),\n"," 'R3': ('R', '175 ohms', ['V1', 'C2', 'L2', 'R1']),\n"," 'R4': ('R', '100 ohms', ['V1', 'C2', 'R2', 'R6']),\n"," 'R5': ('R', '200 ohms', ['C1', 'L1', 'R2']),\n"," 'R6': ('R', '200 ohms', ['C2', 'L2', 'R4']),\n"," 'V1': ('V', '10 V', ['R1', 'R2', 'R3', 'R4'])}\n","______________________________________________________________________\n","\n","\n","______________________________________________________________________\n","######################################################################\n","GRAPH FOR THE CIRCUIT:\n","######################################################################\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["______________________________________________________________________\n","Number of sub graphs found: 862\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","______________________________________________________________________\n","######################################################################\n","GRAPH FOR THE COMPRESSED CIRCUIT:\n","######################################################################\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["______________________________________________________________________\n","\n","\n","\n","\n","\n","\n","Finished!\n","\n","Took 3.6592 seconds\n"],"name":"stdout"}]}]}